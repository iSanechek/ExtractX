import java.text.DateFormat
import java.text.SimpleDateFormat

static def getDateTime() {
    DateFormat df = new SimpleDateFormat("dd MMMMM yyyy");
    return df.format(new Date()) + " г.";
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'service_agency' // выпилить нахуй при первой же возможности

android {
    compileSdkVersion 28

    def fileNaming = "apk/ExtractX"
    def versionNumber = 1
    def versionMajor = "1"
    def versionMinor = "0"
    def versionPatch = "0"
    def versionBuild = -1
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps['DATE_BUILD'] = getDateTime()
        versionProps.store(versionPropsFile.newWriter(), null)
    }

    defaultConfig {
        applicationId "com.isanechek.extractx"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode versionNumber
        versionName "${versionMajor}.${versionMinor}.${versionPatch} (${versionBuild})"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${fileNaming}-${versionMajor}.${versionMinor}.${versionPatch}.apk"
        }
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    def coroutines_version = '1.0.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    def androidx_version = '1.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation "androidx.fragment:fragment:$androidx_version"
    implementation "com.google.android.material:material:$androidx_version"
    implementation "androidx.cardview:cardview:$androidx_version"
    implementation "androidx.legacy:legacy-support-v4:$androidx_version"
    implementation "androidx.annotation:annotation:$androidx_version"
    implementation "androidx.recyclerview:recyclerview:$androidx_version"

    def lifecycle_version = "2.0.0"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    def navigation_version = '1.0.0-alpha07'
    implementation "android.arch.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "android.arch.navigation:navigation-ui-ktx:$navigation_version"

    implementation 'androidx.core:core-ktx:1.0.1'
    implementation 'androidx.sqlite:sqlite-ktx:2.0.0'

    def koin_version = '1.0.1'
    implementation "org.koin:koin-androidx-scope:$koin_version"
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"

    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation 'com.squareup.okhttp3:okhttp:3.11.0'

    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'jp.wasabeef:picasso-transformations:2.2.1'

    implementation 'com.afollestad.material-dialogs:input:2.0.0-beta4'

    implementation project(':library')

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}
